# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PbXmNc1bBM1NdXVcwXt2beNlYNk60JFe
"""

import streamlit as st
import tensorflow as tf
import numpy as np
import os # To handle model path

# --- Model Loading ---
# Use st.cache_resource to load the model only once, even on rerun
@st.cache_resource
def load_generator_model():
    # Adjust path if your model is not directly in a 'models' folder next to app.py
    model_path = os.path.join(os.path.dirname(__file__), 'models', 'cgan_generator_model.h5')
    if not os.path.exists(model_path):
        st.error(f"Model not found at: {model_path}. Please ensure 'cgan_generator_model.h5' is in the 'models' directory.")
        return None
    try:
        model = tf.keras.models.load_model(model_path)
        return model
    except Exception as e:
        st.error(f"Error loading model: {e}")
        return None

generator = load_generator_model()

# --- Streamlit UI ---
st.set_page_config(
    page_title="Handwritten Digit Image Generator",
    page_icon="✍️",
    layout="centered"
)

st.title("✍️ Handwritten Digit Image Generator")
st.write("Generate synthetic MNIST-like images using your trained model.")

if generator is None:
    st.warning("Generator model could not be loaded. Please check the model path and ensure it's saved correctly.")
else:
    # User input for digit selection
    digit_choice = st.selectbox(
        "Choose a digit to generate (0-9):",
        list(range(10)),
        index=0 # Default to digit 0
    )

    # Button to trigger generation
    if st.button("Generate Images", help="Click to generate 5 images of the selected digit"):
        st.subheader(f"Generated images of digit {digit_choice}")

        # Number of images to generate as per problem statement
        num_images_to_generate = 5
        noise_dim = 100 # Match this to your generator's noise input dimension
        num_classes = 10 # Number of possible digits (0-9)

        # Generate random noise
        noise = tf.random.normal([num_images_to_generate, noise_dim])

        # Create one-hot encoded labels for the specific digit
        # This is crucial for conditional generation
        labels = tf.keras.utils.to_categorical([digit_choice] * num_images_to_generate, num_classes=num_classes)
        labels = tf.cast(labels, tf.float32) # Ensure correct dtype

        # Generate images using the loaded generator
        try:
            # Pass both noise and labels to the generator's inputs
            # The order must match the order in make_generator_model's inputs=[noise_input, label_input]
            generated_images = generator([noise, labels], training=False)

            # Post-process generated images: scale from [-1, 1] to [0, 255] for display
            # (Assuming generator's last activation is tanh)
            generated_images = ((generated_images + 1) / 2.0) * 255.0
            generated_images = generated_images.astype(np.uint8)

            # Display the 5 images in columns
            cols = st.columns(num_images_to_generate)
            for i, col in enumerate(cols):
                with col:
                    st.image(generated_images[i, :, :, 0], caption=f"Sample {i+1}", use_column_width=True)

        except Exception as e:
            st.error(f"An error occurred during image generation: {e}")
            st.info("Please ensure your generator model's input shapes match `[noise_input, label_input]` and it's trained for conditional generation.")

st.markdown("---")
st.markdown("Powered by Streamlit and a trained Conditional GAN model.")

